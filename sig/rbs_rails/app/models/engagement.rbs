class Engagement < ApplicationRecord
  extend _ActiveRecord_Relation_ClassMethods[Engagement, ActiveRecord_Relation, Integer]

  attr_accessor id(): Integer
  def id_changed?: () -> bool
  def id_change: () -> [ Integer?, Integer? ]
  def id_will_change!: () -> void
  def id_was: () -> Integer?
  def id_previously_changed?: () -> bool
  def id_previous_change: () -> Array[Integer?]?
  def id_previously_was: () -> Integer?
  def id_before_last_save: () -> Integer?
  def id_change_to_be_saved: () -> Array[Integer?]?
  def id_in_database: () -> Integer?
  def saved_change_to_id: () -> Array[Integer?]?
  def saved_change_to_id?: () -> bool
  def will_save_change_to_id?: () -> bool
  def restore_id!: () -> void
  def clear_id_change: () -> void

  attr_accessor title(): String?
  def title_changed?: () -> bool
  def title_change: () -> [ String?, String? ]
  def title_will_change!: () -> void
  def title_was: () -> String?
  def title_previously_changed?: () -> bool
  def title_previous_change: () -> Array[String?]?
  def title_previously_was: () -> String?
  def title_before_last_save: () -> String?
  def title_change_to_be_saved: () -> Array[String?]?
  def title_in_database: () -> String?
  def saved_change_to_title: () -> Array[String?]?
  def saved_change_to_title?: () -> bool
  def will_save_change_to_title?: () -> bool
  def restore_title!: () -> void
  def clear_title_change: () -> void

  attr_accessor assessment_type(): String?
  def assessment_type_changed?: () -> bool
  def assessment_type_change: () -> [ String?, String? ]
  def assessment_type_will_change!: () -> void
  def assessment_type_was: () -> String?
  def assessment_type_previously_changed?: () -> bool
  def assessment_type_previous_change: () -> Array[String?]?
  def assessment_type_previously_was: () -> String?
  def assessment_type_before_last_save: () -> String?
  def assessment_type_change_to_be_saved: () -> Array[String?]?
  def assessment_type_in_database: () -> String?
  def saved_change_to_assessment_type: () -> Array[String?]?
  def saved_change_to_assessment_type?: () -> bool
  def will_save_change_to_assessment_type?: () -> bool
  def restore_assessment_type!: () -> void
  def clear_assessment_type_change: () -> void

  attr_accessor start_date(): Date?
  def start_date_changed?: () -> bool
  def start_date_change: () -> [ Date?, Date? ]
  def start_date_will_change!: () -> void
  def start_date_was: () -> Date?
  def start_date_previously_changed?: () -> bool
  def start_date_previous_change: () -> Array[Date?]?
  def start_date_previously_was: () -> Date?
  def start_date_before_last_save: () -> Date?
  def start_date_change_to_be_saved: () -> Array[Date?]?
  def start_date_in_database: () -> Date?
  def saved_change_to_start_date: () -> Array[Date?]?
  def saved_change_to_start_date?: () -> bool
  def will_save_change_to_start_date?: () -> bool
  def restore_start_date!: () -> void
  def clear_start_date_change: () -> void

  attr_accessor end_date(): Date?
  def end_date_changed?: () -> bool
  def end_date_change: () -> [ Date?, Date? ]
  def end_date_will_change!: () -> void
  def end_date_was: () -> Date?
  def end_date_previously_changed?: () -> bool
  def end_date_previous_change: () -> Array[Date?]?
  def end_date_previously_was: () -> Date?
  def end_date_before_last_save: () -> Date?
  def end_date_change_to_be_saved: () -> Array[Date?]?
  def end_date_in_database: () -> Date?
  def saved_change_to_end_date: () -> Array[Date?]?
  def saved_change_to_end_date?: () -> bool
  def will_save_change_to_end_date?: () -> bool
  def restore_end_date!: () -> void
  def clear_end_date_change: () -> void

  attr_accessor scoring(): Integer?
  def scoring_changed?: () -> bool
  def scoring_change: () -> [ Integer?, Integer? ]
  def scoring_will_change!: () -> void
  def scoring_was: () -> Integer?
  def scoring_previously_changed?: () -> bool
  def scoring_previous_change: () -> Array[Integer?]?
  def scoring_previously_was: () -> Integer?
  def scoring_before_last_save: () -> Integer?
  def scoring_change_to_be_saved: () -> Array[Integer?]?
  def scoring_in_database: () -> Integer?
  def saved_change_to_scoring: () -> Array[Integer?]?
  def saved_change_to_scoring?: () -> bool
  def will_save_change_to_scoring?: () -> bool
  def restore_scoring!: () -> void
  def clear_scoring_change: () -> void

  attr_accessor language(): String?
  def language_changed?: () -> bool
  def language_change: () -> [ String?, String? ]
  def language_will_change!: () -> void
  def language_was: () -> String?
  def language_previously_changed?: () -> bool
  def language_previous_change: () -> Array[String?]?
  def language_previously_was: () -> String?
  def language_before_last_save: () -> String?
  def language_change_to_be_saved: () -> Array[String?]?
  def language_in_database: () -> String?
  def saved_change_to_language: () -> Array[String?]?
  def saved_change_to_language?: () -> bool
  def will_save_change_to_language?: () -> bool
  def restore_language!: () -> void
  def clear_language_change: () -> void

  attr_accessor state(): Integer?
  def state_changed?: () -> bool
  def state_change: () -> [ Integer?, Integer? ]
  def state_will_change!: () -> void
  def state_was: () -> Integer?
  def state_previously_changed?: () -> bool
  def state_previous_change: () -> Array[Integer?]?
  def state_previously_was: () -> Integer?
  def state_before_last_save: () -> Integer?
  def state_change_to_be_saved: () -> Array[Integer?]?
  def state_in_database: () -> Integer?
  def saved_change_to_state: () -> Array[Integer?]?
  def saved_change_to_state?: () -> bool
  def will_save_change_to_state?: () -> bool
  def restore_state!: () -> void
  def clear_state_change: () -> void

  attr_accessor company_id(): Integer?
  def company_id_changed?: () -> bool
  def company_id_change: () -> [ Integer?, Integer? ]
  def company_id_will_change!: () -> void
  def company_id_was: () -> Integer?
  def company_id_previously_changed?: () -> bool
  def company_id_previous_change: () -> Array[Integer?]?
  def company_id_previously_was: () -> Integer?
  def company_id_before_last_save: () -> Integer?
  def company_id_change_to_be_saved: () -> Array[Integer?]?
  def company_id_in_database: () -> Integer?
  def saved_change_to_company_id: () -> Array[Integer?]?
  def saved_change_to_company_id?: () -> bool
  def will_save_change_to_company_id?: () -> bool
  def restore_company_id!: () -> void
  def clear_company_id_change: () -> void

  attr_accessor created_at(): ActiveSupport::TimeWithZone
  def created_at_changed?: () -> bool
  def created_at_change: () -> [ ActiveSupport::TimeWithZone?, ActiveSupport::TimeWithZone? ]
  def created_at_will_change!: () -> void
  def created_at_was: () -> ActiveSupport::TimeWithZone?
  def created_at_previously_changed?: () -> bool
  def created_at_previous_change: () -> Array[ActiveSupport::TimeWithZone?]?
  def created_at_previously_was: () -> ActiveSupport::TimeWithZone?
  def created_at_before_last_save: () -> ActiveSupport::TimeWithZone?
  def created_at_change_to_be_saved: () -> Array[ActiveSupport::TimeWithZone?]?
  def created_at_in_database: () -> ActiveSupport::TimeWithZone?
  def saved_change_to_created_at: () -> Array[ActiveSupport::TimeWithZone?]?
  def saved_change_to_created_at?: () -> bool
  def will_save_change_to_created_at?: () -> bool
  def restore_created_at!: () -> void
  def clear_created_at_change: () -> void

  attr_accessor updated_at(): ActiveSupport::TimeWithZone
  def updated_at_changed?: () -> bool
  def updated_at_change: () -> [ ActiveSupport::TimeWithZone?, ActiveSupport::TimeWithZone? ]
  def updated_at_will_change!: () -> void
  def updated_at_was: () -> ActiveSupport::TimeWithZone?
  def updated_at_previously_changed?: () -> bool
  def updated_at_previous_change: () -> Array[ActiveSupport::TimeWithZone?]?
  def updated_at_previously_was: () -> ActiveSupport::TimeWithZone?
  def updated_at_before_last_save: () -> ActiveSupport::TimeWithZone?
  def updated_at_change_to_be_saved: () -> Array[ActiveSupport::TimeWithZone?]?
  def updated_at_in_database: () -> ActiveSupport::TimeWithZone?
  def saved_change_to_updated_at: () -> Array[ActiveSupport::TimeWithZone?]?
  def saved_change_to_updated_at?: () -> bool
  def will_save_change_to_updated_at?: () -> bool
  def restore_updated_at!: () -> void
  def clear_updated_at_change: () -> void

  def company: () -> Company
  def company=: (Company?) -> Company?
  def reload_company: () -> Company?
  def build_company: (untyped) -> Company
  def create_company: (untyped) -> Company
  def create_company!: (untyped) -> Company

  module GeneratedRelationMethods
  end

  class ActiveRecord_Relation < ActiveRecord::Relation
    include GeneratedRelationMethods
    include _ActiveRecord_Relation[Engagement, Integer]
    include Enumerable[Engagement]
  end

  class ActiveRecord_Associations_CollectionProxy < ActiveRecord::Associations::CollectionProxy
    include GeneratedRelationMethods
    include _ActiveRecord_Relation[Engagement, Integer]
  end
end
